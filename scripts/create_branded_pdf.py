#!/usr/bin/env python3
"""
Create branded PDF report from text analysis.

Uses ReportLab for PDF generation with professional branding.
"""

from reportlab.lib.pagesizes import A4
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch, mm
from reportlab.lib import colors
from reportlab.platypus import (
    SimpleDocTemplate, Paragraph, Spacer, PageBreak,
    Table, TableStyle, Image, KeepTogether
)
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT, TA_JUSTIFY
from datetime import datetime
from pathlib import Path
import sys

def create_header_footer(canvas, doc):
    """Add header and footer to each page."""
    canvas.saveState()

    # Footer
    canvas.setFont('Helvetica', 8)
    canvas.setFillColor(colors.HexColor('#666666'))
    footer_text = "Generated by Evidence Toolkit AI Analysis | Not Legal Advice - For Professional Review Only"
    canvas.drawCentredString(A4[0] / 2, 15*mm, footer_text)

    # Page number
    page_num = f"Page {doc.page}"
    canvas.drawRightString(A4[0] - 20*mm, 15*mm, page_num)

    # Header line (except first page)
    if doc.page > 1:
        canvas.setStrokeColor(colors.HexColor('#1a73e8'))
        canvas.setLineWidth(0.5)
        canvas.line(20*mm, A4[1] - 20*mm, A4[0] - 20*mm, A4[1] - 20*mm)

    canvas.restoreState()

def create_cover_page(case_id: str, generated_date: str):
    """Create cover page elements."""
    elements = []
    styles = getSampleStyleSheet()

    # Custom styles
    title_style = ParagraphStyle(
        'CustomTitle',
        parent=styles['Heading1'],
        fontSize=32,
        textColor=colors.HexColor('#1a73e8'),
        spaceAfter=30,
        alignment=TA_CENTER,
        fontName='Helvetica-Bold'
    )

    subtitle_style = ParagraphStyle(
        'CustomSubtitle',
        parent=styles['Normal'],
        fontSize=16,
        textColor=colors.HexColor('#5f6368'),
        spaceAfter=20,
        alignment=TA_CENTER,
        fontName='Helvetica'
    )

    # Spacer for vertical centering
    elements.append(Spacer(1, 2*inch))

    # Logo area (placeholder - would be actual logo)
    logo_text = Paragraph(
        '<b>EVIDENCE TOOLKIT</b>',
        ParagraphStyle(
            'Logo',
            fontSize=24,
            textColor=colors.HexColor('#1a73e8'),
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        )
    )
    elements.append(logo_text)
    elements.append(Spacer(1, 0.5*inch))

    # Title
    title = Paragraph('AI Evidence Analysis Report', title_style)
    elements.append(title)

    # Case ID
    case_info = Paragraph(f'<b>Case Reference:</b> {case_id}', subtitle_style)
    elements.append(case_info)

    # Date
    date_info = Paragraph(f'<b>Generated:</b> {generated_date}', subtitle_style)
    elements.append(date_info)

    elements.append(Spacer(1, 1*inch))

    # Disclaimer box
    disclaimer_style = ParagraphStyle(
        'Disclaimer',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.HexColor('#5f6368'),
        alignment=TA_CENTER,
        fontName='Helvetica-Oblique'
    )

    disclaimer = Paragraph(
        '<b>CONFIDENTIAL - ATTORNEY WORK PRODUCT</b><br/><br/>'
        'This report is generated by AI analysis tools and is intended for professional '
        'review only. It does not constitute legal advice. All findings should be '
        'independently verified by qualified legal professionals.',
        disclaimer_style
    )

    # Create a box around disclaimer
    disclaimer_table = Table(
        [[disclaimer]],
        colWidths=[6*inch],
        style=TableStyle([
            ('BACKGROUND', (0, 0), (-1, -1), colors.HexColor('#f5f5f5')),
            ('BOX', (0, 0), (-1, -1), 1, colors.HexColor('#1a73e8')),
            ('LEFTPADDING', (0, 0), (-1, -1), 12),
            ('RIGHTPADDING', (0, 0), (-1, -1), 12),
            ('TOPPADDING', (0, 0), (-1, -1), 12),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
        ])
    )
    elements.append(disclaimer_table)
    elements.append(PageBreak())

    return elements

def format_content(content_text: str):
    """Format the text content into PDF elements."""
    elements = []
    styles = getSampleStyleSheet()

    # Custom styles
    heading1_style = ParagraphStyle(
        'CustomH1',
        parent=styles['Heading1'],
        fontSize=18,
        textColor=colors.HexColor('#1a73e8'),
        spaceAfter=12,
        spaceBefore=16,
        fontName='Helvetica-Bold'
    )

    heading2_style = ParagraphStyle(
        'CustomH2',
        parent=styles['Heading2'],
        fontSize=14,
        textColor=colors.HexColor('#202124'),
        spaceAfter=10,
        spaceBefore=12,
        fontName='Helvetica-Bold'
    )

    body_style = ParagraphStyle(
        'CustomBody',
        parent=styles['Normal'],
        fontSize=10,
        textColor=colors.HexColor('#202124'),
        spaceAfter=6,
        alignment=TA_JUSTIFY,
        fontName='Helvetica'
    )

    code_style = ParagraphStyle(
        'Code',
        parent=styles['Code'],
        fontSize=9,
        textColor=colors.HexColor('#333333'),
        fontName='Courier',
        leftIndent=20,
        spaceAfter=6
    )

    # Parse content line by line
    lines = content_text.split('\n')
    in_code_block = False

    for line in lines:
        stripped = line.strip()

        # Skip decoration lines
        if stripped.startswith('===') or stripped.startswith('---'):
            if not in_code_block:
                elements.append(Spacer(1, 0.1*inch))
            continue

        # Emoji headers (convert to styled headers)
        if stripped.startswith('üìä') or stripped.startswith('üìã') or stripped.startswith('üîó') or \
           stripped.startswith('üìÅ') or stripped.startswith('‚öñÔ∏è'):
            header_text = stripped[2:].strip()  # Remove emoji
            elements.append(Paragraph(header_text, heading1_style))
            continue

        # Bullet points
        if stripped.startswith('‚Ä¢') or stripped.startswith('-'):
            bullet_text = stripped[1:].strip()
            elements.append(Paragraph(f'‚Ä¢ {bullet_text}', body_style))
            continue

        # Numbered lists
        if len(stripped) > 2 and stripped[0].isdigit() and stripped[1] == '.':
            elements.append(Paragraph(stripped, body_style))
            continue

        # Bold sections (lines ending with colon)
        if stripped.endswith(':') and len(stripped.split()) <= 6:
            elements.append(Paragraph(f'<b>{stripped}</b>', body_style))
            continue

        # Regular paragraphs
        if stripped:
            elements.append(Paragraph(stripped, body_style))
        else:
            elements.append(Spacer(1, 0.1*inch))

    return elements

def create_branded_pdf(
    input_file: Path,
    output_file: Path,
    case_id: str = "UNKNOWN",
):
    """Create branded PDF from text file."""

    # Read input content
    content = input_file.read_text()

    # Extract case ID from content if present
    import re
    case_match = re.search(r'CASE.*?:\s*(\S+)', content)
    if case_match:
        case_id = case_match.group(1)

    # Create PDF
    doc = SimpleDocTemplate(
        str(output_file),
        pagesize=A4,
        leftMargin=20*mm,
        rightMargin=20*mm,
        topMargin=25*mm,
        bottomMargin=25*mm,
    )

    # Build content
    story = []

    # Cover page
    generated_date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    story.extend(create_cover_page(case_id, generated_date))

    # Main content
    story.extend(format_content(content))

    # Build PDF with header/footer
    doc.build(story, onFirstPage=create_header_footer, onLaterPages=create_header_footer)

    print(f"‚úÖ Branded PDF created: {output_file}")
    return output_file

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python create_branded_pdf.py <input_text_file> [output_pdf_file] [case_id]")
        sys.exit(1)

    input_path = Path(sys.argv[1])
    output_path = Path(sys.argv[2]) if len(sys.argv) > 2 else input_path.with_suffix('.pdf')
    case_id = sys.argv[3] if len(sys.argv) > 3 else "UNKNOWN"

    if not input_path.exists():
        print(f"‚ùå Error: Input file not found: {input_path}")
        sys.exit(1)

    create_branded_pdf(input_path, output_path, case_id)
